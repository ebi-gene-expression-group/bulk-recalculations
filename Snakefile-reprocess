include: "Snakefile"
  
# atom: set grammar=python:

# This script used to rerun studies that have new matrices generated from IRAP/ISL

def get_outputs():
    """
    First method to be executed since it is run by rule all.
    """
    import os.path
    import datetime
    print('Starting getting list of outputs..' + str(datetime.datetime.now()))

    outputs = []
    #get metrics only for baseline
    global metrics
    if config['tool']=="all-baseline" or 'baseline-tracks' in config['tool'] or 'baseline-heatmap' in config['tool'] or 'baseline-coexpression' in config['tool']:
        metrics = get_metrics()

    # Read this now so that it is available for all other needs
    read_metadata_summary()
    global skip_accession
    skip_accession = read_skip_steps_file()
    required_config=['tool']
    check_config_required(fields=required_config)

    # collect output for reprocessing
    outputs.extend(expand("logs/"+f"{config['accession']}-check_configuration_xml.done" ))

    if config['tool']=="all-baseline" or 'baseline-tracks' in config['tool'] or 'baseline-heatmap' in config['tool'] or 'baseline-coexpression' in config['tool']:
        outputs.extend(expand("logs/"+f"{config['accession']}-check_factors_xml.done" ))
        outputs.append(f"{config['accession']}-raw-counts.tsv.undecorated")
        outputs.extend(expand(config['accession']+"-{metric}.tsv.undecorated", metric=metrics))
        outputs.extend(expand(config['accession']+"-transcripts-{metric}.tsv.undecorated", metric=["tpms"] ))
        outputs.append(f"{config['accession']}-transcripts.riu.tsv")
        #outputs.extend(expand("qc/"+f"{config['accession']}-irap-single-lib-report.tsv" ))   # TO BE DONE when ISL is available
        outputs.append(f"{config['accession']}-tpms.tsv.undecorated.quantile_normalized")

    # collect output for differential rna-seq
    # 
    # collect output for differential microarrays
    # 
    

    print(outputs)
    print('Getting list of outputs.. done')
    print(datetime.datetime.now())

    return outputs


rule all:
    input:
        required_outputs=get_outputs()

