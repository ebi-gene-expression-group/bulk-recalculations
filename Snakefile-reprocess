include: "Snakefile"
  
# atom: set grammar=python:

# This script used to rerun studies that have new matrices generated from IRAP/ISL

def get_outputs():
    """
    First method to be executed since it is run by rule all.
    """
    import os.path
    import datetime
    print('Starting getting list of outputs..' + str(datetime.datetime.now()))

    outputs = []
    #get metrics only for baseline
    global metrics
    if config['tool']=="all-baseline" or 'baseline-tracks' in config['tool'] or 'baseline-heatmap' in config['tool'] or 'baseline-coexpression' in config['tool']:
        metrics = get_metrics_reprocess()

    # Read this now so that it is available for all other needs
    read_metadata_summary()
    global skip_accession
    skip_accession = read_skip_steps_file()
    required_config=['tool']
    check_config_required(fields=required_config)

    print(get_from_config_or_metadata_summary('experiment_type'))
    # collect output for reprocessing
    if get_from_config_or_metadata_summary('experiment_type') == 'rnaseq_mrna_baseline':
    #if config['tool']=="all-baseline" or 'baseline-tracks' in config['tool'] or 'baseline-heatmap' in config['tool'] or 'baseline-coexpression' in config['tool']:
        outputs.append(f"{config['accession']}-raw-counts.tsv.undecorated")
        outputs.extend(expand(config['accession']+"-{metric}.tsv.undecorated", metric=metrics))
        outputs.extend(expand(config['accession']+"-transcripts-{metric}.tsv.undecorated", metric=["tpms"] ))
        outputs.extend(expand("logs/"+f"{config['accession']}-copy_transcript_relative_isoforms.done" ))
        #outputs.extend(expand("qc/"+f"{config['accession']}-irap-single-lib-report.tsv" ))   # TO BE DONE when ISL is available
        outputs.extend(expand(config['accession']+"-{metric}.tsv.undecorated.quantile_normalized", metric=metrics))
        outputs.extend(expand(config['accession']+"-{metric}.tsv.undecorated.aggregated", metric=metrics))
        outputs.extend(expand("logs/"+f"{config['accession']}"+"-rule-transcripts_na_check_{metric}.done", metric=["tpms"] ))
        outputs.extend(expand("logs/"+f"{config['accession']}"+"-quantile_normalise_transcripts_{metric}.done", metric=["tpms"] )) 
        outputs.extend(expand("logs/"+f"{config['accession']}"+"-summarize_transcripts_{metric}.done", metric=["tpms"] ))
        outputs.append(f"{config['accession']}-analysis-methods.tsv")
        outputs.append(f"{config['accession']}-atlasExperimentSummary.Rdata")
        outputs.extend(expand(config['accession']+"-{metric}.tsv", metric=metrics))
        outputs.extend(expand("logs/"+f"{config['accession']}"+"-transcripts-{metric}.tsv.done", metric=["tpms"] ))
        outputs.extend(expand(f"{config['accession']}"+"-heatmap-{metric}.pdf", metric=metrics ))
        outputs.append(f"{config['accession']}-heatmap.pdf")
        # baseline tracks
        check_config_required(fields=['metadata_summary'], method='baseline-tracks')
        outputs.extend(expand(config['accession']+".{a_id}.genes.expressions_{metric}.bedGraph",
                            a_id=get_assay_ids(),
                            metric=metrics))
        outputs.extend(expand("logs/"+f"{config['accession']}"+".{a_id}.create_tracks_symlinks_{metric}.done",
                            a_id=get_assay_ids(),
                            metric=["tpms"]))  #symlink only for tpms

        # generating coexpressions matrix for baseline experiment
        outputs.extend(expand(f"{config['accession']}"+"-{metric}-coexpressions.tsv.gz", metric=metrics ))
        outputs.append(f"{config['accession']}-coexpressions.tsv.gz")
        #metric_link_coexp=False
        #for m in metrics:
        #    expression_file=f"{config['accession']}-{m}.tsv"
        #    print(f"Checking file size for {expression_file} and number of columns")
        #    if os.path.getsize(expression_file) > 0 and get_number_columns(expression_file)>4:
        #        metric_link_coexp=True
        #        outputs.extend(expand(f"{config['accession']}-{m}-coexpressions.tsv.gz"))
        #if metric_link_coexp == True:
        #    outputs.extend(expand(f"{config['accession']}-coexpressions.tsv.gz" ))


    # collect output for differential rna-seq
    if get_from_config_or_metadata_summary('experiment_type') == 'rnaseq_mrna_differential':
        outputs.append(f"{config['accession']}-raw-counts.tsv.undecorated")
        #outputs.extend(expand("qc/"+f"{config['accession']}-irap-single-lib-report.tsv" ))   # TO BE DONE when ISL is available
        outputs.append(f"{config['accession']}-analytics.tsv.undecorated")
        #outputs.extend(expand(config['accession']+"-{id}-mvaPlot.png", id=get_contrast_ids() ))


    # collect output for differential microarrays
    #if get_from_config_or_metadata_summary('experiment_type') == 'microarray_1colour_mrna_differential' or get_from_config_or_metadata_summary('experiment_type') =='microarray_2colour_mrna_differential' or get_from_config_or_metadata_summary('experiment_type') =='microarray_1colour_microrna_differential':

    # collect output for baseline proteomics
    #if get_from_config_or_metadata_summary('experiment_type') == 'proteomics_baseline' or get_from_config_or_metadata_summary('experiment_type') =='proteomics_baseline_dia':

    # collect output for differential proteomics
    #if get_from_config_or_metadata_summary('experiment_type') == 'proteomics_differential':


    print(outputs)
    print('Getting list of outputs.. done')
    print(datetime.datetime.now())

    return outputs


rule all:
    input:
        required_outputs=get_outputs()


